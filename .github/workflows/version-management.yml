name: Version Management

on:
  workflow_call:
    inputs:
      version_type:
        description: 'Version increment type'
        required: false
        default: 'patch'
        type: string
      custom_version:
        description: 'Custom version (optional)'
        required: false
        type: string
      version_file:
        description: 'Version file path'
        required: false
        default: 'version.txt'
        type: string
    outputs:
      new_version:
        description: "New version number"
        value: ${{ jobs.version-management.outputs.new_version }}
      current_version:
        description: "Current version number"
        value: ${{ jobs.version-management.outputs.current_version }}
    secrets:
      POT_TOKEN:
        required: true

jobs:
  version-management:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      current_version: ${{ steps.version.outputs.current_version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.POT_TOKEN }}
          persist-credentials: true
          clean: true

      # Remote URL'i token ile güncelle
      - name: Configure Git Authentication
        run: |
          # Token'lı URL oluştur
          git remote set-url origin https://x-access-token:${{ secrets.POT_TOKEN }}@github.com/${{ github.repository }}.git
          
          # Git config ayarları
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          
          # Push ayarları
          git config --local push.autoSetupRemote true

      # Tüm tag'leri ve branch'leri al
      - name: Fetch all refs
        run: |
          echo "Fetching all tags and branches..."
          git fetch --all --tags --prune --prune-tags --force
          
          echo "Current branch: $(git branch --show-current)"
          echo "All local tags:"
          git tag -l
          echo "All remote tags:"
          git ls-remote --tags origin | awk '{print $2}' | sed 's|refs/tags/||'

      - name: Get Current Version and Create New Version
        id: version
        run: |
          VERSION_FILE="${{ inputs.version_file }}"
          
          # Remote'daki en son tag'i al
          echo "Getting latest tag from remote..."
          LATEST_REMOTE_TAG=$(git ls-remote --tags origin | grep -v '{}' | awk '{print $2}' | sed 's|refs/tags/||' | grep '^v[0-9]' | sort -V | tail -n1)
          
          if [ -n "$LATEST_REMOTE_TAG" ]; then
            CURRENT_VERSION=$(echo "$LATEST_REMOTE_TAG" | sed 's/^v//')
            echo "Current version from remote tag: $CURRENT_VERSION"
          else
            # Local tag'leri kontrol et
            LATEST_LOCAL_TAG=$(git tag -l 'v[0-9]*' | sort -V | tail -n1)
            if [ -n "$LATEST_LOCAL_TAG" ]; then
              CURRENT_VERSION=$(echo "$LATEST_LOCAL_TAG" | sed 's/^v//')
              echo "Current version from local tag: $CURRENT_VERSION"
            elif [ -f "$VERSION_FILE" ]; then
              CURRENT_VERSION=$(cat $VERSION_FILE | tr -d '\n\r' | tr -d ' ')
              echo "Current version from file: $CURRENT_VERSION"
            else
              CURRENT_VERSION="1.0.0"
              echo "Using default version: $CURRENT_VERSION"
            fi
          fi
          
          # Version format kontrolü
          if ! [[ "$CURRENT_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format: $CURRENT_VERSION, using 1.0.0"
            CURRENT_VERSION="1.0.0"
          fi
          
          echo "Determined current version: $CURRENT_VERSION"
          
          # Custom version varsa onu kullan
          if [ -n "${{ inputs.custom_version }}" ]; then
            NEW_VERSION="${{ inputs.custom_version }}"
            echo "Using custom version: $NEW_VERSION"
          else
            # Versiyon parçalarını ayır
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
            # Sayı kontrol
            if ! [[ "$MAJOR" =~ ^[0-9]+$ ]] || ! [[ "$MINOR" =~ ^[0-9]+$ ]] || ! [[ "$PATCH" =~ ^[0-9]+$ ]]; then
              echo "Invalid version parts, resetting to 1.0.0"
              MAJOR=1; MINOR=0; PATCH=0
            fi
          
            # Version type'a göre artır
            VERSION_TYPE="${{ inputs.version_type }}"
            echo "Incrementing version with type: $VERSION_TYPE"
          
            case $VERSION_TYPE in
              major) 
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor) 
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch|*) 
                PATCH=$((PATCH + 1))
                ;;
            esac
          
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          fi
          
          # Version format kontrolü
          if ! [[ "$NEW_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid new version format: $NEW_VERSION, using fallback"
            NEW_VERSION="1.0.1"
          fi
          
          echo "New version will be: $NEW_VERSION"
          
          # Version dosyasını güncelle
          echo "$NEW_VERSION" > $VERSION_FILE
          
          # Git durumunu kontrol et
          echo "Git status before commit:"
          git status
          
          # Version dosyasını commit et
          git add $VERSION_FILE
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
            echo "Committed version file"
          fi
          
          # Push changes
          echo "Pushing changes to branch..."
          git push origin HEAD:${{ github.ref_name }} || {
            echo "Direct push failed, trying with force-with-lease..."
            git push --force-with-lease origin HEAD:${{ github.ref_name }}
          }
          
          # Tag oluştur
          TAG_NAME="v${NEW_VERSION}"
          echo "Creating tag: $TAG_NAME"
          
          # Local'de tag varsa sil
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists locally, deleting it"
            git tag -d "$TAG_NAME"
          fi
          
          # Remote'da tag varsa sil
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME"; then
            echo "Tag $TAG_NAME exists on remote, deleting it"
            git push origin --delete "$TAG_NAME" || true
          fi
          
          # Yeni tag oluştur ve push et
          git tag "$TAG_NAME" -m "Release version $NEW_VERSION"
          git push origin "$TAG_NAME" || {
            echo "Tag push failed, trying with force..."
            git push --force origin "$TAG_NAME"
          }
          
          echo "Successfully created and pushed tag: $TAG_NAME"
          
          # Output'ları ayarla
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Verify Version Update
        run: |
          echo "=== Version Summary ==="
          echo "Previous Version: ${{ steps.version.outputs.current_version }}"
          echo "New Version: ${{ steps.version.outputs.new_version }}"
          echo ""
          echo "=== Current Git State ==="
          echo "Latest local tag: $(git describe --tags --abbrev=0 2>/dev/null || echo 'No local tags')"
          echo "Latest remote tag: $(git ls-remote --tags origin | grep -v '{}' | awk '{print $2}' | sed 's|refs/tags/||' | grep '^v[0-9]' | sort -V | tail -n1 || echo 'No remote tags')"
          echo "Version file content: $(cat ${{ inputs.version_file }} 2>/dev/null || echo 'File not found')"
          echo ""
          echo "=== All Tags ==="
          git tag -l | sort -V

      - name: Archive Version File
        uses: actions/upload-artifact@v4
        with:
          name: version-file-${{ steps.version.outputs.new_version }}
          path: ${{ inputs.version_file }}
          retention-days: 30