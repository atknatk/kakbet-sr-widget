# .github/workflows/main.yml
name: Kakbet Widget Proxy CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: 'Custom version (optional)'
        required: false
        type: string
      node_version:
        description: 'Node.js Version'
        required: false
        default: '18'
        type: string
      environment:
        description: 'Deployment environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_rebuild:
        description: 'Force rebuild even if no changes'
        required: false
        default: false
        type: boolean

env:
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY || '827604626727.dkr.ecr.eu-central-1.amazonaws.com' }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY || 'kakbet/sr-widget-proxy' }}
  PROJECT_NAME: "Kakbet Widget Proxy"
  PROJECT_EMOJI: "🎯"
  NODE_VERSION: "18"
  AWS_REGION: "eu-central-1"

permissions:
  contents: write
  actions: read
  id-token: write
  packages: write
  security-events: write

jobs:
  # 1. Security and Validation
  security-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      should_build: ${{ steps.changes.outputs.should_build }}
      node_version: ${{ steps.setup.outputs.node_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false

      - name: Setup Node.js and Environment
        id: setup
        run: |
          NODE_VER="${{ github.event.inputs.node_version || env.NODE_VERSION }}"
          echo "node_version=$NODE_VER" >> $GITHUB_OUTPUT
          echo "🟢 Using Node.js version: $NODE_VER"

      - name: Check for changes
        id: changes
        run: |
          if [ "${{ github.event.inputs.force_rebuild }}" = "true" ]; then
            echo "🔄 Force rebuild requested"
            echo "should_build=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          if [ "${{ github.event_name }}" = "workflow_dispatch" ] || [ "${{ github.event_name }}" = "push" ]; then
            echo "🚀 Manual trigger or push event"
            echo "should_build=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "🔍 PR validation mode"
            echo "should_build=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "should_build=true" >> $GITHUB_OUTPUT

      - name: Verify Project Structure
        if: steps.changes.outputs.should_build == 'true'
        run: |
          echo "🔍 Verifying Kakbet Widget Proxy project structure..."

          # Essential files check
          REQUIRED_FILES=("package.json" "Dockerfile" "src/server.js")
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Required file not found: $file"
              exit 1
            fi
            echo "✅ Found: $file"
          done

          # Check if it's Node.js project
          if ! grep -q "express" package.json; then
            echo "❌ Express not found in dependencies!"
            exit 1
          fi

          # Check Node.js version compatibility
          if ! grep -q "node.*18" package.json; then
            echo "⚠️ Node.js version might not be compatible"
          fi

          echo "✅ Project structure validation completed"

      - name: Security Scan - Secrets Detection
        run: |
          echo "🔒 Scanning for exposed secrets..."

          # Check for common secret patterns
          if grep -r -i "password\|secret\|key\|token" --include="*.js" --include="*.yml" --include="*.yaml" --include="*.json" . | grep -v "description\|example\|test\|mock"; then
            echo "⚠️ Potential secrets found - please review"
          else
            echo "✅ No obvious secrets detected"
          fi

  # 2. Code Quality and Testing (DISABLED)
  code-quality:
    needs: security-validation
    if: needs.security-validation.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Code Quality Checks (DISABLED)
        run: |
          echo "🚫 Code quality checks are disabled"
          echo "✅ Skipping linting, formatting, and type checking"
          echo "🎯 Focus on functionality and tests only"

  # 3. Version Management
  version-management:
    needs: [security-validation, code-quality]
    if: needs.security-validation.outputs.should_build == 'true' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    uses: ./.github/workflows/version-management.yml
    with:
      version_type: ${{ github.event.inputs.version_type || 'patch' }}
      custom_version: ${{ github.event.inputs.custom_version }}
      version_file: "version.txt"
    secrets:
      POT_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 4. Docker Build and Push
  docker-build:
    needs: [security-validation, code-quality, version-management]
    if: needs.security-validation.outputs.should_build == 'true' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: ${{ github.event.inputs.environment || 'staging' }}

    outputs:
      image_url: ${{ steps.build.outputs.image_url }}
      image_digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: false

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64
          driver-opts: |
            network=host
          buildkitd-flags: |
            --allow-insecure-entitlement security.insecure
            --allow-insecure-entitlement network.host

      - name: Prepare build metadata
        id: meta
        run: |
          VERSION="${{ needs.version-management.outputs.new_version }}"
          NODE_VER="${{ needs.security-validation.outputs.node_version }}"

          # Image tags
          TAGS="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${VERSION}"
          TAGS="${TAGS},${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest"

          # Build args
          BUILD_ARGS="VERSION=${VERSION}"
          BUILD_ARGS="${BUILD_ARGS},NODE_VERSION=${NODE_VER}"
          BUILD_ARGS="${BUILD_ARGS},BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          BUILD_ARGS="${BUILD_ARGS},GIT_COMMIT=${{ github.sha }}"
          BUILD_ARGS="${BUILD_ARGS},GIT_BRANCH=${{ github.ref_name }}"

          # Labels
          LABELS="org.opencontainers.image.title=Kakbet Widget Proxy"
          LABELS="${LABELS},org.opencontainers.image.description=Enterprise-grade Widget Proxy Service"
          LABELS="${LABELS},org.opencontainers.image.version=${VERSION}"
          LABELS="${LABELS},org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          LABELS="${LABELS},org.opencontainers.image.revision=${{ github.sha }}"
          LABELS="${LABELS},org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}"
          LABELS="${LABELS},com.kakbet.node.version=${NODE_VER}"
          LABELS="${LABELS},com.kakbet.framework=express"

          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "build_args=${BUILD_ARGS}" >> $GITHUB_OUTPUT
          echo "labels=${LABELS}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: ${{ steps.meta.outputs.build_args }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Verify image
        run: |
          echo "🔍 Verifying built image..."
          IMAGE_URL="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.meta.outputs.version }}"
          docker manifest inspect "$IMAGE_URL"
          echo "✅ Image verification completed"
          echo "image_url=$IMAGE_URL" >> $GITHUB_OUTPUT

      - name: Security scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results (disabled - requires Advanced Security)
        uses: github/codeql-action/upload-sarif@v3
        if: false  # Disabled - requires GitHub Advanced Security
        with:
          sarif_file: 'trivy-results.sarif'

  # 5. Create Release
  create-release:
    needs: [security-validation, code-quality, version-management, docker-build]
    if: needs.security-validation.outputs.should_build == 'true' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.version-management.outputs.new_version }}
          release_name: ⚡ Kakbet SB Odd Consumer v${{ needs.version-management.outputs.new_version }}
          body: |
            ## ⚡ Kakbet SB Odd Consumer v${{ needs.version-management.outputs.new_version }}

            ### 🚀 What's New
            - Enterprise-grade Sportsbook Odds Consumer Service
            - FastAPI with Poetry dependency management
            - Multi-architecture Docker support (AMD64/ARM64)
            - Enhanced security and performance optimizations

            ### 🐳 Docker Image
            ```bash
            docker pull ${{ needs.docker-build.outputs.image_url }}
            ```

            ### 🛠️ Technical Details
            - **Python Version**: ${{ needs.security-validation.outputs.python_version }}
            - **Framework**: FastAPI + Poetry
            - **Architecture**: linux/amd64, linux/arm64
            - **Image Size**: Optimized multi-stage build
            - **Security**: Trivy scanned, SBOM included

            ### 📦 Deployment
            ```bash
            # Using Docker
            docker run -d --name kakbet-sb-odd-consumer \
              -p 8000:8000 \
              -e DEBUG=false \
              -e LOG_LEVEL=INFO \
              ${{ needs.docker-build.outputs.image_url }}

            # Using Docker Compose
            docker-compose up -d
            ```

            ### 🔗 Links
            - [📊 Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [🐳 Container Registry](${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }})
            - [📂 Repository](${{ github.server_url }}/${{ github.repository }})

            ---
            **Full Changelog**: [v${{ needs.version-management.outputs.current_version }}...v${{ needs.version-management.outputs.new_version }}](${{ github.server_url }}/${{ github.repository }}/compare/v${{ needs.version-management.outputs.current_version }}...v${{ needs.version-management.outputs.new_version }})
          draft: false
          prerelease: ${{ contains(needs.version-management.outputs.new_version, 'rc') || contains(needs.version-management.outputs.new_version, 'beta') || contains(needs.version-management.outputs.new_version, 'alpha') }}

  # 6. Send Notifications
  send-notifications:
    needs: [security-validation, code-quality, version-management, docker-build, create-release]
    if: always() && needs.security-validation.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Determine build status
        id: status
        run: |
          if [ "${{ needs.docker-build.result }}" = "success" ] && [ "${{ needs.create-release.result }}" = "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=✅" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        if: always() && vars.SLACK_WEBHOOK_URL != ''
        run: |
          STATUS="${{ steps.status.outputs.status }}"
          EMOJI="${{ steps.status.outputs.emoji }}"
          COLOR="${{ steps.status.outputs.color }}"
          VERSION="${{ needs.version-management.outputs.new_version || 'N/A' }}"
          PYTHON_VER="${{ needs.security-validation.outputs.python_version }}"
          IMAGE_URL="${{ needs.docker-build.outputs.image_url || 'N/A' }}"
          WORKFLOW_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          # Create Slack payload
          PAYLOAD=$(cat << EOF
          {
            "text": "$EMOJI Kakbet SB Odd Consumer Pipeline - $STATUS",
            "attachments": [
              {
                "color": "$COLOR",
                "fields": [
                  {
                    "title": "Status",
                    "value": "$STATUS",
                    "short": true
                  },
                  {
                    "title": "Version",
                    "value": "v$VERSION",
                    "short": true
                  },
                  {
                    "title": "Python Version",
                    "value": "$PYTHON_VER",
                    "short": true
                  },
                  {
                    "title": "Docker Image",
                    "value": "$IMAGE_URL",
                    "short": false
                  },
                  {
                    "title": "Workflow",
                    "value": "<$WORKFLOW_URL|View Run>",
                    "short": true
                  }
                ]
              }
            ]
          }
          EOF
          )

          # Send to Slack
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "$PAYLOAD" \
              "${{ secrets.SLACK_WEBHOOK_URL }}"
            echo "✅ Slack notification sent"
          else
            echo "⚠️ SLACK_WEBHOOK_URL not configured, skipping notification"
          fi

  # 7. Pipeline Summary
  pipeline-summary:
    runs-on: ubuntu-latest
    needs: [security-validation, code-quality, version-management, docker-build, create-release, send-notifications]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Calculate pipeline metrics
        id: metrics
        run: |
          # Calculate total pipeline duration
          START_TIME="${{ github.event.head_commit.timestamp || github.event.created_at }}"
          END_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          echo "start_time=$START_TIME" >> $GITHUB_OUTPUT
          echo "end_time=$END_TIME" >> $GITHUB_OUTPUT

      - name: Generate Pipeline Summary
        run: |
          echo "## ⚡ Kakbet SB Odd Consumer CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 📊 Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status | Duration | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔒 Security & Validation | ${{ needs.security-validation.result || 'skipped' }} | ~2min | Project structure, secrets scan |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Code Quality & Tests | ${{ needs.code-quality.result || 'skipped' }} | ~1min | DISABLED - Focus on functionality |" >> $GITHUB_STEP_SUMMARY
          echo "| 📝 Version Management | ${{ needs.version-management.result || 'skipped' }} | ~1min | ${{ needs.version-management.outputs.new_version && format('v{0}', needs.version-management.outputs.new_version) || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🐳 Docker Build & Push | ${{ needs.docker-build.result || 'skipped' }} | ~10min | Multi-arch, security scan |" >> $GITHUB_STEP_SUMMARY
          echo "| 📦 Release Creation | ${{ needs.create-release.result || 'skipped' }} | ~1min | GitHub release |" >> $GITHUB_STEP_SUMMARY
          echo "| 📢 Notifications | ${{ needs.send-notifications.result || 'skipped' }} | ~30s | Slack notifications |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 🐳 Container Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: \`${{ env.ECR_REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: \`${{ env.ECR_REPOSITORY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: \`${{ needs.docker-build.outputs.image_url || 'N/A' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: \`linux/amd64, linux/arm64\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Python Version**: \`${{ needs.security-validation.outputs.python_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 🚀 Quick Deploy Commands" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Pull and run the latest image" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ needs.docker-build.outputs.image_url || env.ECR_REGISTRY }}/{{ env.ECR_REPOSITORY }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "docker run -d --name kakbet-sb-odd-consumer -p 8000:8000 \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e DEBUG=false -e LOG_LEVEL=INFO \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ needs.docker-build.outputs.image_url || env.ECR_REGISTRY }}/{{ env.ECR_REPOSITORY }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Health check" >> $GITHUB_STEP_SUMMARY
          echo "curl http://localhost:8000/health" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [📦 Release v${{ needs.version-management.outputs.new_version }}](${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ needs.version-management.outputs.new_version }})" >> $GITHUB_STEP_SUMMARY
          echo "- [🐳 Container Registry](https://${{ env.ECR_REGISTRY }})" >> $GITHUB_STEP_SUMMARY
          echo "- [🏃 Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- [📂 Repository](${{ github.server_url }}/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
          echo "- [📊 Security Scan Results](${{ github.server_url }}/${{ github.repository }}/security/code-scanning)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 📈 Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Self-hosted runners**: ✅ Optimized for speed" >> $GITHUB_STEP_SUMMARY
          echo "- **BuildKit cache**: ✅ Enabled for faster builds" >> $GITHUB_STEP_SUMMARY
          echo "- **Multi-arch build**: ✅ AMD64 + ARM64 support" >> $GITHUB_STEP_SUMMARY
          echo "- **Security scanning**: ✅ Trivy + SARIF upload" >> $GITHUB_STEP_SUMMARY
          echo "- **SBOM generation**: ✅ Software Bill of Materials" >> $GITHUB_STEP_SUMMARY